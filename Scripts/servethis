#!/usr/bin/env python3.4

manpage = """
Start webserver with the contents of this folder and open it in a browser.
Files ending in .cgi, .pl, .rb or .py will be executed as cgi scripts.
"""

import http.server
import argparse
import os
import sys

cgi_extensions = ('.cgi', '.pl', '.rb', '.py')
colorize_log = True


class CGIExtHTTPRequestHandler(http.server.CGIHTTPRequestHandler):
    def is_cgi(self):
        query = ''
        base = self.path
        i = base.find('?')
        if i != -1:
            query = base[i:]
            base = base[:i]
        if not base.lower().endswith(cgi_extensions):
            return False
        [parentDirs, script] = base.rsplit('/', 1)
        self.cgi_info = (parentDirs, script+query)
        return True

    def log_message(self, format, *args):
        msg = "%s - - [%s] %s"

        if colorize_log:
            red = "\033[0;31m"
            green = "\033[0;32m"
            blue = "\033[0;34m"
            cyan = "\033[0;36m"
            white = "\033[0;37m"
            msg = blue + "%s - - [%s] " + cyan + "%s" + white
            if format == '"%s" %s %s':
                if args[1] == '200':
                    status_col = green
                else:
                    status_col = red
                format = '"%s" ' + status_col + '%s ' + cyan + '%s'
            if format == 'code %d, message %s':
                format = red + format

        print(msg %
              (self.address_string(),
               self.log_date_time_string(),
               format % args))


def run_server(port):
    dirName = os.getcwd()
    blanks = dirName.count(' ')
    if blanks > 0:
        print("Error: The path to this directory contains spaces")
        return

    server_addr = ('localhost', port)
    cgiServer = http.server.HTTPServer(server_addr, CGIExtHTTPRequestHandler)
    cgiServer.serve_forever()

parser = argparse.ArgumentParser(description=manpage)
parser.add_argument('-p', '--port', default=8765, type=int,
                    help='http port (default 8765)')
args = parser.parse_args()

os.system("open http://0.0.0.0:%s" % args.port)

try:
    run_server(args.port)
except KeyboardInterrupt:
    sys.exit(0)
